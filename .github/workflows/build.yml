name: Build

on: [push]

env:
  CIBW_SKIP: pp* *musllinux*
  CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
  CIBW_BEFORE_ALL_LINUX: bash ./prebuild_linux.sh
  CIBW_TEST_COMMAND: python -c "import psychtoolbox as ptb; print(ptb.GetSecs())"
  CIBW_ARCHS_MACOS: x86_64 # universal2 # build wheels that'll work on M1 Macs
  CIBW_ARCHS_LINUX: auto64
  CIBW_ENVIRONMENT: PTB_LIMITED_WHEEL=1
  CIBW_ENVIRONMENT_MACOS: CC=gcc-11

jobs:
  build_wheels:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macOS-11]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.8"
          architecture: "x64"

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.9.0
      - name: Build wheel
        run: |
          git submodule update --init --recursive
          cp prebuild_linux.sh psychtoolbox-3/prebuild_linux.sh
          cd psychtoolbox-3
          python -m cibuildwheel --output-dir ../dist
          cd ..
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist

  build_source:
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.8"
          architecture: "x64"

      - name: Build source
        run: |
          git submodule update --init --recursive
          python -m pip install build
          cd psychtoolbox-3
          python -m build --sdist --outdir=../dist
          cd ..
      - name: Look
        run: ls dist
      - name: Install Ubuntu deps
        run: sudo apt-get install -y libusb-1.0-0-dev portaudio19-dev libasound2-dev libxi-dev
      - name: Test install
        run: python -m pip install dist/*.tar.gz && eval $CIBW_TEST_COMMAND
      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist

  upload:
    runs-on: ubuntu-latest
    needs: [build_source, build_wheels]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: wheels
          path: ./dist

      - name: Upload to GitHub Releases
        uses: softprops/action-gh-release@v1
        if: startsWith(github.event.ref, 'refs/tags')
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.event.ref, 'refs/tags')
        uses: pypa/gh-action-pypi-publish@master
        with:
          password: ${{ secrets.pypi_password }}
